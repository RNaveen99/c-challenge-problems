/*
    Developer: Bhagesh Dhankher
    Roll No.: 2017CSC1031
    Objective: Various operation on singly linked list
*/
#include<iostream>
#include<stdlib.h>


using namespace std;

struct NODE{
    int key;
    NODE *next;

};

int main(){
    int ele;
    NODE *head = ((NODE*)malloc(sizeof(NODE)));
    head->next=NULL;
    head->key=0;
    NODE *tail = ((NODE*)malloc(sizeof(NODE)));
    tail->next=NULL;
    tail->key=0;
    NODE *temp;
    bool flag = true;
    while (flag==true){
            int ans;
        cout<<"Enter 1 to add to head"<<endl;
        cout<<"Enter 2 to add to tail"<<endl;
        cout<<"Enter 3 to add between nodes"<<endl;
        cout<<"Enter 4 to delete a node from head"<<endl;
        cout<<"Enter 5 to delete a node from tail"<<endl;
        cout<<"Enter 6 to delete a node from between specifying its value"<<endl;
        cout<<"Enter 7 to display the singly linked list"<<endl;
        cin>>ans;
        switch(ans){
        case 1:{
            int n;
            cout<<"Enter number of nodes to link to the head => ";
            cin>>n;
             for(int i=0; i<n; i++){
            cin>>ele;
            NODE *new_node = ((NODE*)malloc(sizeof(NODE)));
            if (head->key==0){
                head->key=ele;
                head->next=NULL;
            }
            else{
                new_node->key=ele;
                new_node->next=head;
                head = new_node;

            }
            }
            break;
            }
        case 2:{
            int n;
             cout<<"Enter number of nodes to link to the tail => ";
            cin>>n;
             for(int i=0; i<n; i++){
            cin>>ele;
            NODE *new_node = ((NODE*)malloc(sizeof(NODE)));
            new_node->key=ele;
            new_node->next=NULL;
            if (head->key==0){
                head->key=ele;
                head->next=NULL;
            }
            else{
                NODE *t = head;
                while(t->next!=NULL){
                    t=t->next;
                }
                t->next=new_node;

            }
            }

            break;
        }
        case 3:{
            int ele,b,q;
            temp = head;
            cout<<"Enter element to insert: ";
            cin>>ele;
            cout<<endl;
            NODE *p = ((NODE*)malloc(sizeof(NODE)));
            p->key = ele;
            p->next = NULL;
            cout<<"Enter the 2 consecutive node: ";
            cin>>b;
            cin>>q;
            while(temp!=NULL)
            {
                if((temp->key==b)&&((temp->next)->key==q)){
                    p->next = temp->next;
                    temp->next = p;

                }
                temp = temp->next;
            }
            break;

        }
        case 4:{
            NODE *temp = ((NODE*)malloc(sizeof(NODE)));
            temp=head;
            if(head==NULL){
                cout<<"Linked List is emplty. Please add to the list"<<endl;

            }
            else{
                    head = temp->next;
                    delete(temp);
                    }
            break;}
        case 5:{
            if(head==NULL){
                cout<<"List is empty. Please add at first ";
            }
            else{
                NODE *prev = ((NODE*)malloc(sizeof(NODE)));
                NODE *temp = head;
                while(temp->next!=NULL){
                    prev = temp;
                    temp= temp->next;
                }
                prev->next=NULL;
                delete(temp);

            }

            break;}
        case 6:{
            int ele;
            NODE *temp = ((NODE*)malloc(sizeof(NODE)));
            NODE *prev = ((NODE*)malloc(sizeof(NODE)));
            temp = head;
            cout<<"Enter the element to delete"<<endl;
            cin>>ele;
            while(temp->key!=ele){
                prev =temp;
                temp=temp-> next;
            }
            prev->next = temp->next;
            delete(temp);
            break;}

        case 7:{
            temp = head;
            cout<<"Linked List is as follows ";
            while(temp!=NULL){
                cout<<temp->key<<"->";
                temp= temp->next;
            }
            cout<<"NULL";
            break;
        }


        }
        cout<<endl;
        cout<<"Want to exit y/n => ";
        char check;
        cin>>check;
        if (check=='y')
            flag=false;
        cout<<endl;
        cout<<"--------------------------------";
        cout<<"--------------------------------";
        cout<<endl;


    }





    }


